//module
// fifo by kaustubh ahire
module fifo(clk, rst, wr, rd,data_in, data_out, full, empty);
  input clk, rst, wr, rd;
  input [3:0]data_in;
  output full, empty;
  output reg [3:0] data_out;
  reg[3:0] wr_ptr, rd_ptr;
  reg [3:0] count;
  reg [3:0] memory [7:0];
 /////////////////////////////////////
  ////////////////////////////////////////////////////
  
  
  assign empty=(count==0)?1:0; 
  assign full=(count==8)?1:0;
  always@(posedge clk) 
    begin
    if (rst)
      begin
        data_out<=0;
        count<=0;
        
  //empty=1'b1; //full=1'b0;
        wr_ptr<=1'b0;
        rd_ptr<=1'b0;
        for(int i=0;i<8; i++)
          begin 
            memory[i]<=0;
          end
      end
    else
      begin
        if (wr && !full)
          begin memory[wr_ptr]=data_in;
            wr_ptr=wr_ptr+1;
            count=count+1;
          end
        else if (rd && !empty)
          begin
            data_out=memory[rd_ptr]; 
            data_out=data_out;
          rd_ptr=rd_ptr+1;
            count=count-1; 
          end
      end
    end
  
 endmodule
 
 
 
 
 
 ///testbench
 // fifo by kaustubh ahire
module fifo_tb;
  reg clk, rst, wr, rd;
  reg[3:0] data_in;
reg full, empty;
reg [3:0] data_out;
  reg [3:0] wr_ptr, rd_ptr;
  reg [3:0] count;
  reg [3:0] memory [7:0];
  
  fifo DUT(.clk(clk),.rst(rst), .wr(wr), .rd(rd), .data_in(data_in), .data_out(data_out), .full(full), .empty(empty));
 //begin
  // #2;
    
initial
    begin
      $dumpfile("dumpfile.vcd");
      $dumpvars(1,fifo_tb);
    end
  
  always #10 clk=~clk;
  initial
    begin
     // wrptr=0;
      wr=0;wr_ptr=0;
      rd=0;rd_ptr=0;count=0;
      rst=1;
      #50
      rst=0;
    end
  initial
     begin
       wr=1; 
       #10
        data_in=8'd14;
       #20
     data_in=8'd21;
       #10
       data_in=8'd56;
       #10;
        #10
        data_in=8'd14;
       #20
     data_in=8'd21;
       #10
       data_in=8'd56;
       #10;
        #10
        data_in=8'd14;
       #20
     data_in=8'd21;
       #10
       data_in=8'd56;
       #10;
       rd=1; wr=0;
        #10
        data_in=8'd14;
       #20
     data_in=8'd21;
       #10
       data_in=8'd56;
       #10;
       
       
       #500
       $finish;
     end
  
      
       initial
    begin
      $monitor("$time=%0d wr_ptr=%d; rd_ptr=%d; data_out=%d  full=%b  empty=%b data_in=%d  count=%0d ",$time,wr_ptr,rd_ptr,data_out,full,empty,data_in,count);

       end
endmodule
